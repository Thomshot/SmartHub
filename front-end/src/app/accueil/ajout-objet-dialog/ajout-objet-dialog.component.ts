import { Component, inject, OnInit } from '@angular/core';
import { FormBuilder, Validators, FormControl, FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { Observable } from 'rxjs';
import { map, startWith } from 'rxjs/operators';
import { AsyncPipe, CommonModule } from '@angular/common';

import { MatInputModule } from '@angular/material/input';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatStepperModule } from '@angular/material/stepper';
import { MatButtonModule } from '@angular/material/button';
import { MatSelectModule } from '@angular/material/select';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import {
  MatDialogActions,
  MatDialogClose,
  MatDialogContent,
  MatDialogTitle,
  MatDialogRef
} from '@angular/material/dialog';

@Component({
  selector: 'app-ajout-objet-dialog',
  standalone: true,
  imports: [
    CommonModule,
    MatAutocompleteModule,
    MatSelectModule,
    MatStepperModule,
    MatInputModule,
    MatFormFieldModule,
    MatButtonModule,
    FormsModule,
    ReactiveFormsModule,
    MatDialogActions,
    MatDialogClose,
    MatDialogContent,
    MatDialogTitle,
    AsyncPipe
  ],
  templateUrl: './ajout-objet-dialog.component.html',
  styleUrl: './ajout-objet-dialog.component.scss'
})
export class AjoutObjetDialogComponent implements OnInit {

  private _formBuilder = inject(FormBuilder);

  isLinear = true;

  // Formulaires
  firstFormGroup!: FormGroup;
  secondFormGroup!: FormGroup;
  thirdFormGroup!: FormGroup;

  // Autocomplete
  myControl = new FormControl('');
  options: string[] = [
    'Lampe', 'Ampoule connect√©e', 'Prise intelligente', 'Interrupteur connect√©', 'Ruban LED',
    'Thermostat', 'Chauffage connect√©', 'Climatisation', 'Radiateur connect√©', 'Ventilateur connect√©',
    'D√©shumidificateur', 'Humidificateur', 'R√©frig√©rateur', 'Four', 'Micro-ondes', 'Lave-vaisselle',
    'Machine √† laver', 'S√®che-linge', 'Bouilloire connect√©e', 'Cafeti√®re connect√©e', 'Grille-pain connect√©',
    'Aspirateur robot', 'Robot laveur de sol', 'Nettoyeur de vitres', 'Arrosage automatique',
    'Cam√©ra de s√©curit√©', 'D√©tecteur de mouvement', 'D√©tecteur de fum√©e', 'D√©tecteur de gaz', 'Alarme',
    'Capteur d‚Äôouverture', 'Sonnette connect√©e', 'Serrure connect√©e', 'Volet roulant', 'Porte de garage connect√©e',
    'Interphone', 'Badge d‚Äôacc√®s', 'T√©l√©vision connect√©e', 'Enceinte connect√©e', 'Assistant vocal',
    'T√©l√©commande universelle', 'Console de jeu', 'Hub domotique', 'Panneau solaire', 'Station m√©t√©o',
    'Capteur de qualit√© de l‚Äôair', 'Compteur d‚Äô√©nergie connect√©', 'Capteur de luminosit√©', 'Capteur d‚Äôhumidit√©'
  ];
  filteredOptions!: Observable<string[]>;

  // Liste des pi√®ces
  rooms: string[] = [
    'Salon', 'Cuisine', 'Chambre', 'Salle de bain', 'Garage', 'Entr√©e',
    'Buanderie', 'Bureau', 'Jardin', 'Terrasse', 'Grenier'
  ];

  // Image upload
  previewUrl: string | ArrayBuffer | null = null;

  ngOnInit(): void {
    // √âtape 1 : Choix du type d‚Äôobjet
    this.firstFormGroup = this._formBuilder.group({
      firstCtrl: ['', Validators.required],
    });

    // √âtape 2 : D√©tails de l‚Äôobjet
    this.secondFormGroup = this._formBuilder.group({
      objectName: ['', Validators.required],
      room: ['', Validators.required],
      brand: [''],
      id: [''],
    });

    // √âtape 3 : Connectivit√©
    this.thirdFormGroup = this._formBuilder.group({
      ip: [''],
      mac: [''],
      protocol: [''],
    });

    // Autocomplete : filtrage des options
    this.filteredOptions = this.myControl.valueChanges.pipe(
      startWith(''),
      map(value => this._filter(value || ''))
    );
  }

  private _filter(value: string): string[] {
    const filterValue = value.toLowerCase();
    return this.options.filter(option =>
      option.toLowerCase().includes(filterValue)
    );
  }

  onFileSelected(event: Event): void {
    const input = event.target as HTMLInputElement;
    if (input.files && input.files[0]) {
      const reader = new FileReader();
      reader.onload = () => (this.previewUrl = reader.result);
      reader.readAsDataURL(input.files[0]);
    }
  }

  constructor(private dialogRef: MatDialogRef<AjoutObjetDialogComponent>) {}

  submitObject() {
    const newObject = {
      type: this.firstFormGroup.get('firstCtrl')?.value,
      name: this.secondFormGroup.get('objectName')?.value,
      room: this.secondFormGroup.get('room')?.value,
      brand: this.secondFormGroup.get('brand')?.value,
      id: this.secondFormGroup.get('id')?.value,
      ip: this.thirdFormGroup.get('ip')?.value,
      mac: this.thirdFormGroup.get('mac')?.value,
      protocol: this.thirdFormGroup.get('protocol')?.value,
      imageUrl: this.previewUrl
    };
  
    this.dialogRef.close(newObject); // üëà renvoyer l'objet √† l'appelant
  }
}
